/*
Author: Peter Peterson
Date: 2017-07-24
Description: Code for interactions with the staging page
*/
import Shared from './mixins.js';
import Vue from 'vue';


const generateResultsSet = function(){
  const results = [];
  for (let x = 1; x <= 100; x++) {
    results.push({count:x, filename: Math.random().toString(36).substring(7)});
  }

  return results;
};

const stagingComponent = {
  mixins:[Shared.mixin],
  data(){
      return {
        stagingAllFiles: false,
        loading: false,
        selectAll: false,
        results: [],
        selected: [],
        totalfiles: 0,
        missingfiles:0
      };
    },
  created(){
    window.staging = this;
    console.log("Staging created");
  },
  mounted(){
    console.log("Component mounted");
    window.base.bindEvents();
    if (localStorage.getItem("stage") === "selectedFiles") {
      // Files array is generated by the staging django template
      const files = JSON.parse(localStorage.getItem("selectedFiles"));
      Array.from(files).map((file) =>
        this.results.push({'selected':false, 'file':file}));
    } else {
      // show a loading screen
      this.stagingAllFiles = true;
      this.loading = true;
      const querydata = localStorage.getItem("search");


      new Ajax({
        url: "/portal/stageall/",
        method: "post",
        accept: "json",
        data: JSON.parse(querydata),
        success: data=> {
          this.totalfiles = data.total_files;
          this.missingfiles = data.missing_files;
          this.loading = false;
        },
        fail(statusMsg, status, xhr){
          console.log("ajax failed");
          console.info("TODO: Add a fail message and option to try again/or stage less files");
        }
      });
    }
  },


      // call api to start staging process...

  methods: {
    toggleAll(){
      this.selectAll = !this.selectAll;
      if (this.selectAll) {
        return (() => {
          const result = [];
          for (let file of Array.from(this.results)) {
            file.selected = true;
            result.push(this.selected.push(file));
          }
          return result;
        })();
      } else {
        for (let file of Array.from(this.results)) {
          file.selected = false;
        }
        return this.selected = [];
      }
    },

    downloadSingleFile(file, event){
      // identify which file...
      event.stopPropagation();
      window.open(`/portal/downloadsinglefile/?f=${file.reference}`, "_blank");
      return false;
    }, // prevent bubbling up

    _confirmDownloadSelected(){
      const { selected } = this; // scope resolution
      const query = {"files":selected.slice(0, 10)};
      const form = document.createElement("form");
      form.setAttribute("method", "post");
      //form.setAttribute("target", "_blank")
      form.setAttribute("action", "/portal/downloadselected");
      const data = document.createElement("input");
      data.setAttribute("type", "hidden");
      data.setAttribute("name", "selected");
      data.setAttribute("value", JSON.stringify(selected.slice(0,10)));
      form.appendChild(data);
      document.querySelector("body").appendChild(form);
      return form.submit();
      /*
      new Ajax
        url: "/portal/downloadselected"
        method: "post"
        accept: "json"
        data: query
        success: (data)=>
          console.log "Got this from the server"
          console.log data
        fail: (statusmsg, status, xhr)->
          console.log "request failed"
      */
    },


    downloadSelected(){
      console.log("downloading selected");
      const self = this;
      if (this.selected.length > 10) {
        BootstrapDialog.confirm("Only ten files can be downloaded at one time. See download instructions for downloading more at one time",
        function(goAhead){
           if (goAhead) {
            self._confirmDownloadSelected();
          }
        });
      } else {
        self._confirmDownloadSelected();
      }
    },


    toggleSelected(item){
      item.selected = !item.selected;
      if (item.selected) {
        this.selected.push(item);
      } else {
        const indx = _.indexOf(this.selected, item);
        this.selected.splice(indx, 1);
      }
    }
  }

};


export default stagingComponent;
//module.exports(stagingComponent);
